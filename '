/*
 * This function will get all the data from sync server.
 * Provided with the callback function as a parameter,
 * it will process the chart afterall.
 */
function getValue(callback) { 
	chrome.storage.sync.get(null, callback);
}

function countUsedInfoMonth(allObj, targetYear) {
	var count = 0;
	var index = 0;
	var filteredData;
	//var allkeys = Object.keys(allObj);

	// filteredData will have object sets that is marked
	// by "time#".
	filteredData = getFilteredData(allObj, "url");
	alert(filteredData.length);

	
	// Count data using site name now if chart shows 
	// monthly or daily statistics. 
	// We need to use "time#" type data to represent it
	// monthly, daily, etc.
	// getMonthlyCounts(allObj, filteredData);

	return count;
}

/*
 * allObj contains all data objects from google sync server.
 * type should specify either "time" or "url".
 * This function will return data object set that is filtered
 * by 'type'.
 */
function getFilteredData(allObj, type) {
	var filtered = new Array();

	for (var itemKey in allObj) {
		// parsedStr[0] -> time#month
		// parsedStr[1] -> day
		// parsedStr[2] -> year + ' ' + data
		
		var posItem = allObj[itemKey].length-2;
		//alert(allObj[itemKey][posItem].hostName);
		var tokenedData = itemKey.split('#');
		if (tokenedData[0] == type) {
			//filtered.push(allObj[itemKey]);
			filtered.push(itemKey);
		}
	}

	return filtered;
}

function getMonthlyCounts(objs, timeData) {
	var visit = new Array();

	for (var cnt = 0; cnt < timeData.length; cnt++) {
		var parsedStr = timeData[cnt].split('/');	
		var month = parsedStr[0];
		var year = parsedStr[2].split(' ')[0];

		var len = objs[timeData[cnt]].length;
		var tmpObj = new Object();
		tmpObj.url = objs[timeData[cnt]][len-2].value;
		tmpObj.visitCount = 0;
		var siteName = objs[timeData[cnt]][len-2].value;
		len = 0;
	}
	
	//var len = allObj[filteredData[0]].length;
	//alert(allObj[filteredData[0]][len-2].value);

	// filtering data according to year.
	/*if (year == targetYear) {
		filtered.push(itemKey);
	}*/
}

/*
 * Callback for chrome.storage.sync.get() function. 
 * This will be passed to the sync.get() function.
 * This callback will get all the data from sync server,
 * and then put it to the chart.
 * Chart will be displayed after the page is loaded.
 */
function processChart(obj) {
	//var allkeys = Object.keys(obj);
	//var testKey = allkeys[0];

	// count the number of information that have been used
	// per website.
	// result will be an array that stores all the access
	// numbers.
	// var result = countUsedInfoMonth(obj, 2014);

	var urlData = getFilteredData(obj, "url");

	var barDataSet = Array();
	for (var i = 0; i < urlData.length; i++) {
		var randColor = Math.floor(Math.random() * 256);
		var tmpData = new Object();
		
		tmpData.fillColor = "rgba(" + randColor + "," + randColor + "," + randColor + "," + "0.5)";
		tmpData.strokeColor = "rgba(220,220,220,0.8)";
		tmpData.highlightFill = "rgba(220,220,220,0.75)";
		tmpData.highlightStroke = "rgba(220,220,220,1)";
		//tmpData.data = ;

	}

	var foo = new Object();
	foo.fillColor = "rgba(220,220,220,0.5)";
	foo.strokeColor = "rgba(220,220,220,0.8)";
	foo.highlightFill = "rgba(220,220,220,0.75)";
	foo.highlightStroke = "rgba(220,220,220,1)";
	foo.data = new Array(12);
	for (var i = 0; i < 12; i++) {
		foo.data[i] = 12;
	}

	var testDataSet1 = 
		{
			fillColor : "rgba(220,220,220,0.5)",
			strokeColor : "rgba(220,220,220,0.8)",
			highlightFill: "rgba(220,220,220,0.75)",
			highlightStroke: "rgba(220,220,220,1)",
			data : [65, 59, 80, 81, 56, 55, 40]
		};

	var barChartData = {
		labels : ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],
		datasets : [
			foo,
			testDataSet1, 
			{
				fillColor : "rgba(220,220,220,0.5)",
				strokeColor : "rgba(220,220,220,0.8)",
				highlightFill: "rgba(220,220,220,0.75)",
				highlightStroke: "rgba(220,220,220,1)",
				data : [65, 59, 80, 81, 56, 55, 40]
			},
			{
				fillColor : "rgba(151,187,205,0.5)",
				strokeColor : "rgba(151,187,205,0.8)",
				highlightFill : "rgba(151,187,205,0.75)",
				highlightStroke : "rgba(151,187,205,1)",
				data : [28, 48, 40, 19, 86, 27, 90]
			}
		]
	};

	window.onload = showBarChart(barChartData);
}

/*
 * This function process chart.
 */
function showBarChart(barData) {
	var ctx = document.getElementById("canvas").getContext("2d");
	window.myBar = new Chart(ctx).Bar(barData, {
			responsive : true
		});
}

/* Initiate chart processing */
getValue(processChart);
